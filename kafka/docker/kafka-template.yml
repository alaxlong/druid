version: '3.7'

volumes:
  zk-data:
  zk-logs:  
  broker-logs: 
  data-grafana:

networks:
  default:
    external:
      name: ${NETWORK}

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.0    
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
    ports:
      - 12181:12181
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-logs:/var/lib/zookeeper/log

  # broker:
  #   image: confluentinc/cp-kafka:5.1.0    
  #   container_name: broker
  #   hostname: broker
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 9092:9092  
  #     - 19092:19092   
  #     - 9999:9999 
  #     - 1099:1099
  #     - 19999:19999
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
  #     KAFKA_ADVERTISED_LISTENERS: ${BROKER_ADV_LISTENERS}
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${PROTOCOL_MAP}
  #     KAFKA_LOG_RETENTION_HOURS: ${BROKER_LOG_RETENTION_IN_HOURS}
  #     KAFKA_LOG_ROLL_HOURS: ${BROKER_LOG_ROLL_IN_HOURS}
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_JMX_PORT : 19999
  #     KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=9999 -javaagent:/root/prometheus/jmx_prometheus_javaagent-0.10.jar=9999:/root/prometheus/prom-jmx-agent-config.yml"
  #     # KAFKA_JMX_OPTS: -javaagent:/root/prometheus/jmx_prometheus_javaagent-0.10.jar=7071:/root/prometheus/prom-jmx-agent-config.yml
  #   volumes:
  #     - broker-logs:/var/lib/kafka/data
  #     - ${AWS_SECRETS}:/root/.aws    
  #     - ${PROMETHEUS}:/root/prometheus

  broker:
    image: wurstmeister/kafka:2.12-2.2.0
    container_name: broker
    hostname: broker
    depends_on:
      - zookeeper
    ports:           
      - 19092:19092        
      - 7071:7071
    environment:  # todo : fix broker id generation
      KAFKA_BROKER_ID: 1
      # HOSTNAME_COMMAND: "curl http://169.254.169.254/latest/meta-data/public-hostname"      
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:12181        
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:19092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://:9092,EXTERNAL://:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL      
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_LOG_RETENTION_HOURS: 2
      KAFKA_LOG_ROLL_HOURS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_RESERVED_BROKER_MAX_ID : 1020   
      KAFKA_AUTO_CREATE_TOPICS_ENABLE : "false"
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 30
      KAFKA_LEADER_IMBALANCE_PER_BROKER_PERCENTAGE: 0
      KAFKA_OFFSETS_RETENTION_CHECK_INTERVAL_MS: 30000  
      KAFKA_JMX_PORT : 7071
      KAFKA_JMX_OPTS:                  
      EXTRA_ARGS: -javaagent:/root/prometheus/jmx_prometheus_javaagent-0.11.0.jar=7071:/root/prometheus/prom-jmx-agent-config.yml
    volumes:
      - broker-logs:/var/lib/kafka/data
      - ${AWS_SECRETS}:/root/.aws    
      - ${PROMETHEUS}:/root/prometheus         

  prometheus:
    image: prom/prometheus:v2.10.0
    container_name: prometheus
    ports:
      - 9090:9090
    depends_on:
      - zookeeper
      - broker
    volumes:    
      - ${PROMETHEUS}/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:6.2.1
    container_name: grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus    
    environment:
      GF_SECURITY_ADMIN_USER: byob
      GF_SECURITY_ADMIN_PASSWORD: byob
    volumes:
      - data-grafana:/var/lib/grafana
  
  connect:
    image: confluentinc/cp-kafka-connect:5.2.1
    container_name: connect
    hostname: connect
    depends_on:
      - zookeeper
      - broker
    ports:
      - 18083:18083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:9092
      CONNECT_REST_PORT: 18083
      CONNECT_GROUP_ID: "s3-sink"
      CONNECT_CONFIG_STORAGE_TOPIC: "__s3-sink-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "__s3-sink-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "__s3-sink-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1      
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_PLUGIN_PATH: /usr/share/java
      CONNECT_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"            
    volumes:
      - ${AWS_SECRETS}:/root/.aws
      - ${CONNECT_PLUGINS}:/usr/share/java

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:5.1.0
  #   container_name: schema-registry
  #   hostname: schema-registry
  #   restart: always
  #   depends_on:
  #     - zookeeper
  #     - broker
  #   ports:
  #     - "18081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:18081"
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:19092

  # ksql-server:
  #   image: "confluentinc/cp-ksql-server:5.1.0"
  #   container_name: ksql-server
  #   hostname: ksql-server
  #   depends_on:
  #     - broker      
  #   ports:
  #     - 8088:8088
  #   environment:
  #     KSQL_APPLICATION_ID: "ksql-playground"
  #     KSQL_KSQL_SERVICE_ID: "ksql-playground"
  #     KSQL_HOST_NAME: ksql-server
  #     KSQL_BOOTSTRAP_SERVERS: broker:9092
  #     KSQL_LISTENERS: http://0.0.0.0:8088      
  #     KSQL_CONFIG_DIR: "/etc/ksql"
  #     KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"      
  #     KSQL_CACHE_MAX_BYTES_BUFFERING: 0      

  # ksql-cli:
  #   image: confluentinc/cp-ksql-cli:5.1.0
  #   container_name: ksql-cli
  #   depends_on:
  #     - broker
  #     - ksql-server
  #   entrypoint: /bin/sh
  #   tty: true